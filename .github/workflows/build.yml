name: Build macOS Universal2 App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          set -x
          python -m pip install --upgrade pip
          pip install pyinstaller pillow pyobjc

      - name: Build app with PyInstaller
        run: |
          set -x
          pyinstaller --windowed \
            --name DuckApp \
            --add-data "duck.webp:Resources" \
            --add-data "duck1.webp:Resources" \
            duck_spawner.py

          # fix Info.plist
          plist_path="dist/DuckApp.app/Contents/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :LSMinimumSystemVersion 13.0" "$plist_path" || \
            /usr/libexec/PlistBuddy -c "Add :LSMinimumSystemVersion string 13.0" "$plist_path"
          /usr/libexec/PlistBuddy -c "Set :CFBundleSupportedPlatforms:0 MacOSX" "$plist_path" || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleSupportedPlatforms array" "$plist_path"

          # choose output folder
          if [ "${{ matrix.os }}" = "macos-13" ]; then
            outdir="dist/intel"
          else
            outdir="dist/arm"
          fi

          mkdir -p "$outdir"
          cp -R dist/DuckApp.app "$outdir/"

          echo "Contents of $outdir:"
          ls -lR "$outdir"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os == 'macos-13' && 'app-intel' || 'app-arm' }}
          path: ${{ matrix.os == 'macos-13' && 'dist/intel/DuckApp.app' || 'dist/arm/DuckApp.app' }}

  merge:
    runs-on: macos-14
    needs: build

    steps:
      - name: Create directories
        run: |
          mkdir -p dist/intel-orig
          mkdir -p dist/arm-orig
          mkdir -p dist/intel
          mkdir -p dist/arm

      - name: Download Intel artifact
        uses: actions/download-artifact@v4
        with:
          name: app-intel
          path: dist/intel-orig

      - name: Download Arm artifact
        uses: actions/download-artifact@v4
        with:
          name: app-arm
          path: dist/arm-orig

      - name: Debug artifact structure
        run: |
          set -x
          echo "=== Intel artifact structure ==="
          find dist/intel-orig -type f -name "*.app" | head -5
          find dist/intel-orig -type d -name "Contents" | head -5
          echo "=== Arm artifact structure ==="
          find dist/arm-orig -type f -name "*.app" | head -5
          find dist/arm-orig -type d -name "Contents" | head -5

      - name: Reconstruct .app bundles
        run: |
          set -x
          
          # Check what we actually downloaded
          echo "=== Intel artifact contents ==="
          ls -la dist/intel-orig/
          echo "=== Arm artifact contents ==="
          ls -la dist/arm-orig/
          
          # Reconstruct Intel .app bundle
          if [ -d "dist/intel-orig/Contents" ]; then
            echo "Reconstructing Intel .app bundle from extracted contents"
            mkdir -p dist/intel/DuckApp.app
            cp -R dist/intel-orig/* dist/intel/DuckApp.app/
          elif [ -d "dist/intel-orig/DuckApp.app" ]; then
            echo "Intel artifact has proper .app structure"
            cp -R dist/intel-orig/* dist/intel/
          else
            echo "Trying to find .app in Intel artifact"
            # Look for any .app directory
            app_dir=$(find dist/intel-orig -name "*.app" -type d | head -1)
            if [ -n "$app_dir" ]; then
              echo "Found .app at: $app_dir"
              cp -R "$app_dir" dist/intel/
            else
              echo "ERROR: Could not find .app structure in Intel artifact"
              exit 1
            fi
          fi
          
          # Reconstruct Arm .app bundle  
          if [ -d "dist/arm-orig/Contents" ]; then
            echo "Reconstructing Arm .app bundle from extracted contents"
            mkdir -p dist/arm/DuckApp.app
            cp -R dist/arm-orig/* dist/arm/DuckApp.app/
          elif [ -d "dist/arm-orig/DuckApp.app" ]; then
            echo "Arm artifact has proper .app structure"
            cp -R dist/arm-orig/* dist/arm/
          else
            echo "Trying to find .app in Arm artifact"
            # Look for any .app directory
            app_dir=$(find dist/arm-orig -name "*.app" -type d | head -1)
            if [ -n "$app_dir" ]; then
              echo "Found .app at: $app_dir"
              cp -R "$app_dir" dist/arm/
            else
              echo "ERROR: Could not find .app structure in Arm artifact"
              exit 1
            fi
          fi
          
          echo "=== Final structure ==="
          echo "Intel:"
          ls -la dist/intel/
          echo "Arm:"
          ls -la dist/arm/

      - name: Verify .app bundles
        run: |
          set -x
          echo "=== Verifying Intel .app ==="
          if [ -d "dist/intel/DuckApp.app" ]; then
            echo "Intel .app exists"
            ls -la dist/intel/DuckApp.app/Contents/MacOS/
            file dist/intel/DuckApp.app/Contents/MacOS/DuckApp || echo "Intel binary check failed"
          else
            echo "ERROR: Intel DuckApp.app not found!"
            find dist/intel -type d -name "*.app" || echo "No .app folders found"
            exit 1
          fi
          
          echo "=== Verifying Arm .app ==="
          if [ -d "dist/arm/DuckApp.app" ]; then
            echo "Arm .app exists"
            ls -la dist/arm/DuckApp.app/Contents/MacOS/
            file dist/arm/DuckApp.app/Contents/MacOS/DuckApp || echo "Arm binary check failed"
          else
            echo "ERROR: Arm DuckApp.app not found!"
            find dist/arm -type d -name "*.app" || echo "No .app folders found"
            exit 1
          fi

      - name: Merge into universal2
        run: |
          set -x
          mkdir -p dist/universal/DuckApp.app/Contents/MacOS
          
          echo "Copying Intel .app contents..."
          cp -R dist/intel/DuckApp.app/* dist/universal/DuckApp.app/
          
          echo "Running lipo to create universal binary..."
          lipo -create \
            dist/intel/DuckApp.app/Contents/MacOS/DuckApp \
            dist/arm/DuckApp.app/Contents/MacOS/DuckApp \
            -output dist/universal/DuckApp.app/Contents/MacOS/DuckApp
            
          echo "Setting executable permissions..."
          chmod +x dist/universal/DuckApp.app/Contents/MacOS/DuckApp
          
          echo "=== Final universal binary info ==="
          file dist/universal/DuckApp.app/Contents/MacOS/DuckApp
          lipo -info dist/universal/DuckApp.app/Contents/MacOS/DuckApp
          
          echo "=== Universal app structure ==="
          ls -la dist/universal/DuckApp.app/Contents/MacOS/

      - name: Create DMG
        run: |
          set -x
          echo "Creating DMG..."
          hdiutil create -volname "DuckApp" \
            -srcfolder dist/universal/DuckApp.app \
            -ov -format UDZO \
            dist/DuckApp-universal.dmg
            
          echo "DMG created:"
          ls -l dist/
          hdiutil info dist/DuckApp-universal.dmg

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/DuckApp-universal.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}