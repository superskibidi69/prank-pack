import sys, time, threading, random, os
from Cocoa import (
    NSApplication, NSRunningApplication, NSApplicationActivateIgnoringOtherApps,
    NSWindow, NSView, NSTextField, NSColor, NSBackingStoreBuffered, NSRect, NSButton,
    NSAlert, NSAlertStyleCritical, NSOpenPanel, NSObject
)
from PyObjCTools import AppHelper

# ---------- INIT APP ----------
app = NSApplication.sharedApplication()
NSRunningApplication.currentApplication().activateWithOptions_(NSApplicationActivateIgnoringOtherApps)

editor_win = {"win": None}
glitch_texts = []
phrases = ["HACKED!!!", "ACCESS GRANTED", "root@system:~$", "0101010101", "BREACH DETECTED"]

# ---------- Button handler bridge (PyObjC-safe) ----------
class ButtonHandler(NSObject):
    def initWithCallback_(self, callback):
        # Call Objective-C -init on the allocated instance
        self = self.init()
        if self is None:
            return None
        self.callback = callback
        return self

    def clicked_(self, sender):
        # Invoked when button fires "clicked:" selector
        self.callback(sender)

_button_handlers = []

def button(view, title, frame, action_fn):
    btn = NSButton.alloc().initWithFrame_(frame)
    btn.setTitle_(title)
    view.addSubview_(btn)

    handler = ButtonHandler.alloc().initWithCallback_(action_fn)
    btn.setTarget_(handler)
    btn.setAction_("clicked:")

    # Keep a reference globally so handler isn’t GC’d
    _button_handlers.append(handler)

    return btn

def label(view, text, frame, color=None):
    lbl = NSTextField.alloc().initWithFrame_(frame)
    lbl.setEditable_(False)
    lbl.setBordered_(False)
    lbl.setBackgroundColor_(NSColor.clearColor())
    lbl.setStringValue_(text)
    if color:
        lbl.setTextColor_(color)
    view.addSubview_(lbl)
    return lbl

def field(view, frame, placeholder=""):
    tf = NSTextField.alloc().initWithFrame_(frame)
    tf.setStringValue_(placeholder)
    view.addSubview_(tf)
    return tf

# ---------- Metadata editor (visual-only) ----------
def launch_metadata_editor():
    win = NSWindow.alloc().initWithContentRect_styleMask_backing_defer_(
        NSRect((200, 200), (600, 300)), 15, NSBackingStoreBuffered, False
    )
    win.setTitle_("MP3 Metadata Editor")
    win.makeKeyAndOrderFront_(None)
    editor_win["win"] = win
    content = win.contentView()

    label(content, "File:", NSRect((20, 250), (60, 22)))
    file_display = label(content, "(none)", NSRect((80, 250), (300, 22)))

    label(content, "Title:", NSRect((20, 200), (60, 22)))
    title_field = field(content, NSRect((90, 200), (480, 22)))

    label(content, "Artist:", NSRect((20, 160), (60, 22)))
    artist_field = field(content, NSRect((90, 160), (480, 22)))

    label(content, "Album:", NSRect((20, 120), (60, 22)))
    album_field = field(content, NSRect((90, 120), (480, 22)))

    status = label(content, "", NSRect((20, 90), (560, 20)))

    def open_action(_):
        panel = NSOpenPanel.openPanel()
        panel.setCanChooseFiles_(True)
        panel.setCanChooseDirectories_(False)
        panel.setAllowsMultipleSelection_(False)
        panel.setAllowedFileTypes_(["mp3"])
        if panel.runModal():
            path = panel.URL().path()
            file_display.setStringValue_(os.path.basename(path))
            # Fill with plausible defaults based on filename
            base = os.path.splitext(os.path.basename(path))[0]
            title_field.setStringValue_(base.replace("_", " ").replace("-", " ").strip())
            artist_field.setStringValue_("Unknown Artist")
            album_field.setStringValue_("Unknown Album")
            status.setStringValue_("Loaded file.")

    def save_action(_):
        status.setStringValue_("Saved.")

    button(content, "Open…", NSRect((20, 40), (100, 32)), open_action)
    button(content, "Save", NSRect((130, 40), (100, 32)), save_action)

# ---------- System-style warning alert + takeover ----------
def show_warning_alert():
    alert = NSAlert.alloc().init()
    alert.setMessageText_("WARNING!")
    alert.setInformativeText_("Your system may be infected with malware!\nClick Resolve to fix or OK to ignore at your own risk.")
    alert.setAlertStyle_(NSAlertStyleCritical)
    alert.addButtonWithTitle_("Resolve")
    alert.addButtonWithTitle_("OK")
    response = alert.runModal()
    if response == 1000:
        AppHelper.callAfter(launch_hacked_window)

def launch_hacked_window():
    screen_w, screen_h = 800, 600
    win = NSWindow.alloc().initWithContentRect_styleMask_backing_defer_(
        NSRect((100, 100), (screen_w, screen_h)), 15, NSBackingStoreBuffered, False
    )
    win.setTitle_("SYSTEM HACKED")
    win.makeKeyAndOrderFront_(None)
    content = win.contentView()

    overlay = NSView.alloc().initWithFrame_(NSRect((0, 0), (screen_w, screen_h)))
    overlay.setWantsLayer_(True)
    overlay.layer().setBackgroundColor_(NSColor.blackColor().CGColor())
    content.addSubview_(overlay)

    label(content, "HACKING IS HAPPENING",
          NSRect((20, screen_h - 40), (600, 24)), NSColor.redColor())

    center_text = label(content, "", NSRect((200, screen_h//2), (400, 40)), NSColor.greenColor())

    def typewriter():
        msg = "SYSTEM COMPROMISED."
        out = ""
        for ch in msg:
            out += ch
            def update(o=out):
                center_text.setStringValue_(o)
            AppHelper.callAfter(update)
            time.sleep(0.07)
    threading.Thread(target=typewriter, daemon=True).start()

    glitch_texts.clear()
    for i in range(25):
        tf = label(content, random.choice(phrases),
                   NSRect((random.randint(0, screen_w-200), random.randint(0, screen_h-50)), (200, 22)),
                   NSColor.greenColor())
        glitch_texts.append(tf)

    def animate():
        while True:
            def update():
                for tf in glitch_texts:
                    x = random.randint(0, screen_w-200)
                    y = random.randint(0, screen_h-50)
                    tf.setFrameOrigin_((x, y))
                    tf.setStringValue_(random.choice(phrases))
                    tf.setTextColor_(NSColor.greenColor() if random.random() > 0.3 else NSColor.redColor())
            AppHelper.callAfter(update)
            time.sleep(0.1)
    threading.Thread(target=animate, daemon=True).start()

# ---------- Boot editor and prank timer ----------
launch_metadata_editor()

def delayed_prank():
    time.sleep(23)
    AppHelper.callAfter(show_warning_alert)
threading.Thread(target=delayed_prank, daemon=True).start()

AppHelper.runEventLoop()
